{"ast":null,"code":"import { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol.for; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609\n\nvar ReactForwardRefSymbol = hasSymbol ? Symbol.for(\"react.forward_ref\") : typeof forwardRef === \"function\" && forwardRef(function (props) {\n  return null;\n})[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol ? Symbol.for(\"react.memo\") : typeof memo === \"function\" && memo(function (props) {\n  return null;\n})[\"$$typeof\"]; // n.b. base case is not used for actual typings or exported in the typing files\n\nexport function observer(baseComponent, // TODO remove in next major\noptions) {\n  var _a;\n\n  if (process.env.NODE_ENV !== \"production\" && warnObserverOptionsDeprecated && options) {\n    warnObserverOptionsDeprecated = false;\n    console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is depreacted, use `observer(React.forwardRef(fn))`\");\n  }\n\n  if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n    throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n  } // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n\n\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n  var render = baseComponent;\n  var baseComponentName = baseComponent.displayName || baseComponent.name; // If already wrapped with forwardRef, unwrap,\n  // so we can patch render and apply memo\n\n  if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n    useForwardRef = true;\n    render = baseComponent[\"render\"];\n\n    if (typeof render !== \"function\") {\n      throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n    }\n  }\n\n  var observerComponent = function (props, ref) {\n    return useObserver(function () {\n      return render(props, ref);\n    }, baseComponentName);\n  }; // Don't set `displayName` for anonymous components,\n  // so the `displayName` can be customized by user, see #3192.\n\n\n  if (baseComponentName !== \"\") {\n    ;\n    observerComponent.displayName = baseComponentName;\n  } // Support legacy context: `contextTypes` must be applied before `memo`\n\n\n  if (baseComponent.contextTypes) {\n    ;\n    observerComponent.contextTypes = baseComponent.contextTypes;\n  }\n\n  if (useForwardRef) {\n    // `forwardRef` must be applied prior `memo`\n    // `forwardRef(observer(cmp))` throws:\n    // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n    observerComponent = forwardRef(observerComponent);\n  } // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n\n  observerComponent = memo(observerComponent);\n  copyStaticProperties(baseComponent, observerComponent);\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    Object.defineProperty(observerComponent, \"contextTypes\", {\n      set: function () {\n        var _a;\n\n        throw new Error(\"[mobx-react-lite] `\".concat(this.displayName || ((_a = this.type) === null || _a === void 0 ? void 0 : _a.displayName) || \"Component\", \".contextTypes` must be set before applying `observer`.\"));\n      }\n    });\n  }\n\n  return observerComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don't redefine `displayName`,\n  // it's defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\n\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}","map":{"version":3,"sources":["../src/observer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol\n    ? Symbol.for(\"react.forward_ref\")\n    : typeof forwardRef === \"function\" && forwardRef(function (props) { return null; })[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol\n    ? Symbol.for(\"react.memo\")\n    : typeof memo === \"function\" && memo(function (props) { return null; })[\"$$typeof\"];\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer(baseComponent, \n// TODO remove in next major\noptions) {\n    var _a;\n    if (process.env.NODE_ENV !== \"production\" && warnObserverOptionsDeprecated && options) {\n        warnObserverOptionsDeprecated = false;\n        console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is depreacted, use `observer(React.forwardRef(fn))`\");\n    }\n    if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n        throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n    }\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent;\n    }\n    var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n    var render = baseComponent;\n    var baseComponentName = baseComponent.displayName || baseComponent.name;\n    // If already wrapped with forwardRef, unwrap,\n    // so we can patch render and apply memo\n    if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n        useForwardRef = true;\n        render = baseComponent[\"render\"];\n        if (typeof render !== \"function\") {\n            throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n        }\n    }\n    var observerComponent = function (props, ref) {\n        return useObserver(function () { return render(props, ref); }, baseComponentName);\n    };\n    // Don't set `displayName` for anonymous components,\n    // so the `displayName` can be customized by user, see #3192.\n    if (baseComponentName !== \"\") {\n        ;\n        observerComponent.displayName = baseComponentName;\n    }\n    // Support legacy context: `contextTypes` must be applied before `memo`\n    if (baseComponent.contextTypes) {\n        ;\n        observerComponent.contextTypes = baseComponent.contextTypes;\n    }\n    if (useForwardRef) {\n        // `forwardRef` must be applied prior `memo`\n        // `forwardRef(observer(cmp))` throws:\n        // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n        observerComponent = forwardRef(observerComponent);\n    }\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    observerComponent = memo(observerComponent);\n    copyStaticProperties(baseComponent, observerComponent);\n    if (\"production\" !== process.env.NODE_ENV) {\n        Object.defineProperty(observerComponent, \"contextTypes\", {\n            set: function () {\n                var _a;\n                throw new Error(\"[mobx-react-lite] `\".concat(this.displayName || ((_a = this.type) === null || _a === void 0 ? void 0 : _a.displayName) || \"Component\", \".contextTypes` must be set before applying `observer`.\"));\n            }\n        });\n    }\n    return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true,\n    // Don't redefine `displayName`,\n    // it's defined as getter-setter pair on `memo` (see #3192).\n    displayName: true\n};\nfunction copyStaticProperties(base, target) {\n    Object.keys(base).forEach(function (key) {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n        }\n    });\n}\n//# sourceMappingURL=observer.js.map"]},"metadata":{},"sourceType":"module"}